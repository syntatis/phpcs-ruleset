<?xml version="1.0"?>
<ruleset
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd"
	name="Syntatis">
	<description>Curated Coding Standard for PHP</description>

	<!--
		Trigger error if PHPCSUtils cannot be found.
		PHPCSUtils does not contain any sniffs, so this rule isn't strictly necessary, but
		by having this here anyway, if PHPCSUtils is missing, the user will get a
		descriptive error message during the loading of the ruleset instead of
		a fatal "class not found" error once the sniffs start running.
	-->
	<rule ref="PHPCSUtils"/>

	<!-- Doctrine and Slevomat rules -->
	<rule ref="Doctrine">
		<exclude name="Generic.Formatting.MultipleStatementAlignment"/>
		<exclude name="Generic.WhiteSpace.DisallowTabIndent"/>
		<exclude name="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming"/>
		<exclude name="SlevomatCodingStandard.PHP.RequireExplicitAssertion"/>

		<!-- Skip features not in PHP 7.4 -->
		<exclude name="SlevomatCodingStandard.Classes.RequireConstructorPropertyPromotion"/>
		<exclude name="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration"/>
	</rule>
	<rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
		<properties>
			<property name="annotationsGroups" type="array">
				<element value="@see, @link, @todo, @example"/>

				<!-- Static analysis annotations -->
				<element value="@template, @template-implements, @template-extends"/>
				<element value="
					@phpstan-consistent-constructor,
					@psalm-consistent-constructor,
					@phpstan-import-type,
					@psalm-import-type,
					@phpstan-type,
					@psalm-type"
					/>

				<element value="@var, @phpstan-var, @psalm-var"/>
				<element value="@method, @phpstan-method, @psalm-method"/>
				<element value="@property, @phpstan-property, @psalm-property"/>
				<element value="@param, @phpstan-param, @psalm-param"/>
				<element value="@return, @phpstan-return, @psalm-return"/>
				<element value="@throws, @phpstan-throws, @psalm-throws"/>

				<!-- PHPUnit / PHPCS annotations -->
				<element value="@phpcsSuppress"/>
				<element value="
					@after,
					@afterClass,
					@backupGlobals,
					@backupStaticAttributes,
					@before,
					@beforeClass,
					@codeCoverageIgnore*,
					@covers,
					@coversDefaultClass,
					@coversNothing,
					@dataProvider,
					@depends,
					@doesNotPerformAssertions,
					@group,
					@large,
					@medium,
					@preserveGlobalState,
					@requires,
					@runTestsInSeparateProcesses,
					@runInSeparateProcess,
					@small,
					@test,
					@testdox,
					@testWith,
					@ticket,
					@uses"
					/>
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

	<!-- Avoid using the "goto" statement -->
	<rule ref="Generic.PHP.DiscourageGoto">
		<type>error</type>
		<message>The "goto" language construct should not be used.</message>
	</rule>

	<!-- "eval()" is a security risk, so don't use it -->
	<rule ref="Squiz.PHP.Eval.Discouraged">
		<type>error</type>
		<message>eval() is a security risk so not allowed.</message>
	</rule>

	<!-- PHP tags for multiline PHP code in HTML should be on their own lines -->
	<rule ref="Squiz.PHP.EmbeddedPhp"/>

	<!-- Always use full PHP tags, not shorthand -->
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.PHP.DisallowAlternativePHPTags"/>

	<!-- Prefer require[_once] for unconditional includes -->
	<rule ref="PEAR.Files.IncludingFile.UseRequire">
		<type>warning</type>
	</rule>
	<rule ref="PEAR.Files.IncludingFile.UseRequireOnce">
		<type>warning</type>
	</rule>
	<!-- Prevent issues with content before headers -->
	<rule ref="Generic.Files.ByteOrderMark"/>

	<!-- Magic constants (__*__) should be uppercase -->
	<rule ref="Universal.Constants.UppercaseMagicConstants"/>

	<!-- The ::class keyword should be lowercase -->
	<rule ref="Universal.Constants.LowercaseClassResolutionKeyword"/>

	<!-- Only one namespace declaration per file -->
	<rule ref="Universal.Namespaces.OneDeclarationPerFile"/>

	<!-- Don't use curly brace syntax for namespaces -->
	<rule ref="Universal.Namespaces.DisallowCurlyBraceSyntax"/>

	<!-- No explicit global namespace declarations -->
	<rule ref="Universal.Namespaces.DisallowDeclarationWithoutName"/>

	<!-- Prefer __DIR__ over dirname(__FILE__) and use dirname(__DIR__, $levels) over nested dirname() -->
	<rule ref="Modernize.FunctionCalls.Dirname"/>

	<!-- Avoid ambiguous conditions -->
	<rule ref="Generic.CodeAnalysis.RequireExplicitBooleanOperatorPrecedence"/>

	<!-- Use real tabs and not spaces. -->
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>
	<rule ref="Universal.WhiteSpace.PrecisionAlignment"/>

	<!-- Ensure functions use all passed parameters -->
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter">
		<!-- Allow for callbacks that may not use all parameters -->
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundBeforeLastUsed"/>
		<!-- Allow for extended class/interface functions -->
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClass"/>
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClassBeforeLastUsed"/>
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClassAfterLastUsed"/>
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterface"/>
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterfaceBeforeLastUsed"/>
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterfaceAfterLastUsed"/>
	</rule>

	<!-- All line endings should be \n. -->
	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>

	<!-- Don't commit commented-out code -->
	<rule ref="Squiz.PHP.CommentedOutCode">
		<properties>
			<property name="maxPercentage" value="40"/>
		</properties>
	</rule>

	<!-- Always have a lowertag PHP open tag. -->
	<rule ref="Universal.PHP.LowercasePHPTag"/>

	<!-- Check for duplicate array keys -->
	<rule ref="Universal.Arrays.DuplicateArrayKey"/>

	<!-- No return types for constructors/destructors, or returning values -->
	<rule ref="Universal.CodeAnalysis.ConstructorDestructorReturn"/>

	<!-- Detect foreach loops using the same variable for key and value -->
	<rule ref="Universal.CodeAnalysis.ForeachUniqueAssignment"/>

	<!-- Use self instead of static in final classes -->
	<rule ref="Universal.CodeAnalysis.StaticInFinalClass"/>

	<!-- Avoid if statements as the only statement in an else block -->
	<rule ref="Universal.ControlStructures.DisallowLonelyIf"/>

	<!-- Separate functions and object-oriented code -->
	<rule ref="Universal.Files.SeparateFunctionsFromOO"/>

	<!-- Detect useless "echo sprintf(...)" -->
	<rule ref="Universal.CodeAnalysis.NoEchoSprintf"/>

	<!-- Avoid double negatives "!!" -->
	<rule ref="Universal.CodeAnalysis.NoDoubleNegative"/>

	<!-- Avoid reserved keywords as function parameter names. -->
	<rule ref="Universal.NamingConventions.NoReservedKeywordParameterNames"/>

	<!-- General PHP best practices -->
	<rule ref="Generic.PHP.BacktickOperator"/>
	<rule ref="Universal.UseStatements.NoUselessAliases"/>
	<rule ref="Squiz.Functions.FunctionDuplicateArgument"/>
	<rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
	<rule ref="Squiz.Operators.IncrementDecrementUsage"/>
</ruleset>
